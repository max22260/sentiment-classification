train_dataset <- all_data[trian,]
testdata <- all_data[-trian,]
test_dataset <-createDataPartition(y=testdata$lable,p=0.10 , list = FALSE)
test1 <- testdata[test_dataset,]
test2 <- testdata[-test_dataset,]
train_corpus <- Corpus(VectorSource(train_dataset$content))
length(train_corpus)
set.seed(100) # for randmnes
trian <- createDataPartition(y=all_data$lable,p=0.70 , list = FALSE)
train_dataset <- all_data[trian,]
testdata <- all_data[-trian,]
test_dataset <-createDataPartition(y=testdata$lable,p=0.30, list = FALSE)
test1 <- testdata[test_dataset,]
test2 <- testdata[-test_dataset,]
set.seed(100) # for randmnes
trian <- createDataPartition(y=all_data$lable,p=0.70 , list = FALSE)
train_dataset <- all_data[trian,]
testdata <- all_data[-trian,]
test_dataset <-createDataPartition(y=testdata$lable,p=0.30, list = FALSE)
test1 <- testdata[test_dataset,]
test2 <- testdata[-test_dataset,]
trian <- createDataPartition(y=all_data$lable,p=0.70 , list = FALSE)
train_dataset <- all_data[trian,]
testdata <- all_data[-trian,]
test_dataset <-createDataPartition(y=testdata$lable,p=0.50, list = FALSE)
test1 <- testdata[test_dataset,]
test2 <- testdata[-test_dataset,]
train_corpus <- Corpus(VectorSource(train_dataset$content))
length(train_corpus)
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stripWhitespace = T   ))
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stripWhitespace = T   ))
stem_dtm <- function(dtm, n_char)
{
#dtm is a document term matrix
#nchar is minimum number of characters in a predictor - 1
stem <- function(word)
{
common_endings <- c("*ed$", "*ing$", "*s$", "*es$",
"*ly$", "*ary$", "*self$", "*ful$",
"*less$","*ment$", "*er$", "*ance$",
"*al$", "*ent$", "*sion$", "*tion$",
"*ance$", "*or$", "*ive$", "*ise$")
# remove common endings
for(i in 1:length(common_endings)){word <- sub(common_endings[i], "", word)}
return(word)
}
predictors <- colnames(dtm)
stemmed_predictors <- stem(colnames(dtm))
duplicated_terms <- stemmed_predictors[duplicated(stemmed_predictors,
incomparables = FALSE)]
duplicated_terms <- unique(duplicated_terms[nchar(duplicated_terms) > n_char])
stemmed_dtm <- matrix(NA,
nrow = nrow(dtm),
ncol=length(duplicated_terms))
for(i in 1:length(duplicated_terms))
{
# find columns of duplicated terms
duplicated_columns <- grep(duplicated_terms[i], predictors)
# add them
replacement_column <- rowSums(dtm[,duplicated_columns])
# add the column to a replacement matrix
stemmed_dtm[,i] <- replacement_column
}
print("Made DTM")
colnames(stemmed_dtm) <- duplicated_terms
#making it binary
#stemmed_dtm <- (stemmed_dtm > 0)+0
return(stemmed_dtm)
}
stm_train_matrix <- as.matrix(train_dtm)
stm_train_data_model <- as.data.frame(stm_train_matrix)
stm <- stem_dtm(stm_train_data_model,1)
stmQ <- as.DocumentTermMatrix(stm ,weighting = 1)
stm_train_bag_of_word <- findFreqTerms(stmQ)
length(stm_train_bag_of_word)
stm_mean_train =sort(colMeans(as.matrix(stm)),decreasing = T)
barplot(stm_mean_train[1:60],border = NA , las =3 ,  ylab = "frequency" , ylim = c(0,500),space = F)
barplot(stm_mean_train[1:60],border = NA , las =3 ,  ylab = "frequency" ,space = F)
stm_test1_dtm <-DocumentTermMatrix(test1_corpus,
control = list(tolower = T
, removeNumbers =T ,removePunctuation = T
, stopwords = T , stripWhitespace = T ,
dictionary = stm_train_bag_of_word )
)
dim(stm_test1_dtm)
test1_corpus <- Corpus(VectorSource(as.matrix(test1$content)))
stm_test1_dtm <-DocumentTermMatrix(test1_corpus,
control = list(tolower = T
, removeNumbers =T ,removePunctuation = T
, stopwords = T , stripWhitespace = T ,
dictionary = stm_train_bag_of_word )
)
dim(stm_test1_dtm)
stm_test1_matrix <- as.matrix(test1_dtm)
stm_test1_matrix <- as.matrix(stm_test1_dtm)
stm_test1_data_model <- as.data.frame(test1_matrix)
stm_test1_data_model <- as.data.frame(stm_test1_matrix)
stm1 <-stem_dtm(stm_test1_data_model,1)
stm_train_data_model <- data.frame(y=train_dataset$class , x = stm)
stm_train_data_model <- data.frame(y=train_dataset$lable , x = stm)
stm_test1_data_model <-  data.frame(y=test1$lable , x =stm1)
dim(stm_train_data_model)
dim(stm_test1_data_model)
stm_train_matrix <- as.matrix(train_dtm)
dim(stm_train_matrix)
stm_train_data_model <- as.data.frame(stm_train_matrix)
stm <- stem_dtm(stm_train_data_model,1)
stm_train_matrix <- as.matrix(train_dtm)
stm_train_data_model <- as.data.frame(stm_train_matrix)
stmQ <- as.DocumentTermMatrix(stm_train_data_model ,weighting = 1)
stm_train_bag_of_word <- findFreqTerms(stmQ)
length(stm_train_bag_of_word)
stm_test1_dtm <-DocumentTermMatrix(test1_corpus,
control = list(tolower = T
, removeNumbers =T ,removePunctuation = T
, stopwords = T , stripWhitespace = T ,
dictionary = stm_train_bag_of_word )
)
dim(stm_test1_dtm)
stm_test1_matrix <- as.matrix(stm_test1_dtm)
stm_test1_data_model <- as.data.frame(stm_test1_matrix)
stm <- stem_dtm(stm_train_data_model,1)
stm1 <-stem_dtm(stm_test1_data_model,1)
dim(stm_train_data_model)
dim(stm_test1_data_model)
save(stm_train_data_model,"train/stm_train_data_model.RData")
save(stm_test1_data_model,"train/stm_test1_data_model.RData")
save(stm_train_data_model,"train/stm_train_data_model.RData")
save(stm_train_data_model,file = "train/stm_train_data_model.RData")
save(stm_test1_data_model,file = "train/stm_test1_data_model.RData")
View(stm_train_data_model)
stm_train_data_model <- data.frame(y=train_dataset$lable , x = stm)
stm_test1_data_model <-  data.frame(y=test1$lable , x =stm1)
View(stm_test1_data_model)
View(stm_test1_matrix)
stm_train_data_model <- data.frame(y=train_dataset$lable , x = stm)
stm_test1_data_model <-  data.frame(y=test1$lable , x =stm1)
dim(stm_train_data_model)
dim(stm_test1_data_model)
save(stm_train_data_model,file = "train/stm_train_data_model.RData")
save(stm_test1_data_model,file = "train/stm_test1_data_model.RData")
stm_KSVM_model = ksvm( stm_train_data_model$y~ . , data =stm_train_data_model)
stm_KSVM_test1pred = predict(stm_KSVM_model,newdata = stm_test1_data_model)
table(stm_KSVM_test1pred,stm_test1_data_model[,1])
mmetric(stm_KSVM_test1pred,stm_test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
dim(stm_train_data_model)
library(randomForest)
rf_model <- randomForest(x = stm_train_data_model[,-1],y = stm_train_data_model$y , ntree = 60)
rf_test1pred = predict(rf_model,newdata = stm_test1_data_model )
confusionMatrix(rf_test1pred,stm_test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
mmetric(rf_test1pred,stm_test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stripWhitespace = T   ))
traing_dtm <- as.matrix(train_dtm)
dim(train_dtm)
train_dtm_srt <- removeSparseTerms(train_dtm,0.99) #dimensionality reduction
dim(train_dtm_srt)
train_matrix <- as.matrix(train_dtm_srt)
train_data_model <- data.frame(y=train_dataset$lable , x = train_matrix)
train_bag_of_word <- findFreqTerms(train_dtm_srt)
test1_corpus <- Corpus(VectorSource(as.matrix(test1$content)))
test1_dtm <-DocumentTermMatrix(test1_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stripWhitespace = T  ,dictionary = train_bag_of_word))
str(test1_dtm)
dim(test1_dtm)
### test1 matrix form
test1_matrix <- as.matrix(test1_dtm)
##test1_data_model
test1_data_model <-  data.frame(y=test1$lable , x = test1_matrix)
test2_corpus <- Corpus(VectorSource(as.matrix(test2$content)))
test2_corpus[["1"]][["content"]]
test2_corpus[["2"]][["content"]]
test2_corpus[["3"]][["content"]]
############################################ test2 as document term matrix
test2_dtm <-DocumentTermMatrix(test2_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stripWhitespace = T , stemming = T ,dictionary = train_bag_of_word))
str(test2_dtm)
dim(test2_dtm)
### test1 matrix form
test2_matrix <- as.matrix(test2_dtm)
##test1_data_model
test2_data_model <-  data.frame(y=test2$lable , x = test2_matrix)
summary(test2_data_model)
library(party)
dtree_model <- ctree(y ~ . ,data = train_data_model)
test1pred = predict(dtree_model,newdata = test1_data_model )
confusionMatrix(test1pred,test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
mmetric(test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
library(e1071)
naiveB_model = naiveBayes(y~.,data =train_data_model )
naiveB_test1pred = predict(naiveB_model,newdata = test1_data_model )
confusionMatrix(naiveB_test1pred,test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
mmetric(naiveB_test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
library(kernlab)
KSVM_model = ksvm(y~ . , data =train_data_model)
KSVM_test1pred = predict(KSVM_model,newdata = test1_data_model )
KSVM_test2pred = predict(KSVM_model,newdata = test2_data_model )
KSVM_test1pred = predict(KSVM_model,newdata = test1_data_model )
KSVM_test2pred = predict(KSVM_model,newdata = test2_data_model )
KSVM_test1pred = predict(KSVM_model,newdata = test1_data_model )
KSVM_test2pred = predict(KSVM_model,newdata = test2_data_model )
confusionMatrix(KSVM_test1pred,test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
mmetric(KSVM_test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
rf_model <- randomForest(x = train_data_model[,-1],y = train_data_model$y , ntree = 40)
rf_test1pred = predict(rf_model,newdata = test1_data_model )
confusionMatrix(rf_test1pred,test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
mmetric(rf_test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
mmetric(stm_KSVM_test1pred,stm_test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
dim(train_data_model)
dim(stm_train_data_model)
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
stemming = T, stripWhitespace = T   ))
traing_dtm <- as.matrix(train_dtm)
dim(train_dtm)
train_dtm_srt <- removeSparseTerms(train_dtm,0.99) #dimensionality reduction
dim(train_dtm_srt)
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
stemming = T, stripWhitespace = T   ))
traing_dtm <- as.matrix(train_dtm)
dim(train_dtm)
train_dtm_srt <- removeSparseTerms(train_dtm,0.99) #dimensionality reduction
dim(train_dtm_srt)
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
stemming = T, stripWhitespace = T   ))
traing_dtm = DocumentTermMatrix(step6)
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stemming = T, stripWhitespace = T   ))
traing_dtm <- as.matrix(train_dtm)
dim(train_dtm)
train_dtm_srt <- removeSparseTerms(train_dtm,0.99) #dimensionality reduction
dim(train_dtm_srt)
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stemming = T, stripWhitespace = T   ))
train_dtm <-DocumentTermMatrix(train_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stemming = T, stripWhitespace = T   ))
traing_dtm <- as.matrix(train_dtm)
dim(train_dtm)
train_dtm_srt <- removeSparseTerms(train_dtm,0.99) #dimensionality reduction
dim(train_dtm_srt)
mean_train =sort(colMeans(as.matrix(train_dtm_srt)),decreasing = T)
mean_train[1:20] # top 20  most frequent words
mean_train[1:40] # top 40  most frequent words
mean_train[1:10] # top 10  most frequent words
##########################################################################
average_top20=mean(mean_train[1:20]) # the average frequency of these word
average_top20
################## plot data
barplot(mean_train[1:20],border = NA , las =3 ,xlab = "top 20 word " , ylab = "frequency" , ylim = c(0,1.5))
train_matrix <- as.matrix(train_dtm_srt)
train_data_model <- data.frame(y=train_dataset$lable , x = train_matrix)
### summrize
str(train_data_model)
prop.table(table(train_data_model$y))
nrow(train_data_model)
summary(train_data_model)
####################################################### save bag of word
train_bag_of_word <- findFreqTerms(train_dtm_srt)
length(train_bag_of_word)
############################ generate test1_data_model &test2_data_model
test1_corpus <- Corpus(VectorSource(as.matrix(test1$content)))
test1_corpus[["1"]][["content"]]
test1_corpus[["2"]][["content"]]
test1_corpus[["3"]][["content"]]
############################################ test1 as document term matrix
test1_dtm <-DocumentTermMatrix(test1_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
stemming = T , stripWhitespace = T  ,dictionary = train_bag_of_word))
str(test1_dtm)
dim(test1_dtm)
### test1 matrix form
test1_matrix <- as.matrix(test1_dtm)
##test1_data_model
test1_data_model <-  data.frame(y=test1$lable , x = test1_matrix)
summary(test1_data_model)
######################################################################################### test2
test2_corpus <- Corpus(VectorSource(as.matrix(test2$content)))
test2_corpus[["1"]][["content"]]
test2_corpus[["2"]][["content"]]
test2_corpus[["3"]][["content"]]
############################################ test2 as document term matrix
test2_dtm <-DocumentTermMatrix(test2_corpus, control = list(tolower = T , removeNumbers =T ,removePunctuation = T , stopwords = T
, stripWhitespace = T , stemming = T ,dictionary = train_bag_of_word))
str(test2_dtm)
dim(test2_dtm)
### test1 matrix form
test2_matrix <- as.matrix(test2_dtm)
##test1_data_model
test2_data_model <-  data.frame(y=test2$lable , x = test2_matrix)
summary(test2_data_model)
library(party)
mmetric(test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
dtree_model <- ctree(y ~ . ,data = train_data_model)
test1pred = predict(dtree_model,newdata = test1_data_model )
confusionMatrix(test1pred,test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
mmetric(test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
naiveB_model = naiveBayes(y~.,data =train_data_model )
naiveB_test1pred = predict(naiveB_model,newdata = test1_data_model )
confusionMatrix(naiveB_test1pred,test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
# second accuracy
mmetric(naiveB_test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
#***************************** k-nearest
library(kernlab)
KSVM_model = ksvm(y~ . , data =train_data_model)
########################## prediction process
test2_data_model$x <-0
KSVM_test1pred = predict(KSVM_model,newdata = test1_data_model )
KSVM_test2pred = predict(KSVM_model,newdata = test2_data_model )
summary(KSVM_test1pred)
summary(KSVM_test2pred)
prop.table(table(KSVM_test1pred))
############################################## testing and evaluate the prediction
#first confusion matrix
confusionMatrix(KSVM_test1pred,test1_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
confusionMatrix(KSVM_test2pred,test2_data_model[,1],positive = "positive", dnn = c ("prediction","true"))
# second accuracy
mmetric(KSVM_test1pred,test1_data_model[,1],c("ACC","TPR","PRECISION","F1"))
mmetric(KSVM_test2pred,test2_data_model[,1],c("ACC","TPR","PRECISION","F1"))
library('Rtsne')
library('ggplot2')
library('plotly')
library('tsne')
features <- train_data_model[, !names(train_data_model) %in% c("y")]
tsne <- Rtsne(
as.matrix(features),
check_duplicates = FALSE,
perplexity = 30,
theta = 0.5,
dims = 2,
verbose = TRUE
)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(train_data_model$y)
ax <- list(title = ""
,zeroline = FALSE)
p <- plot_ly(
data = embedding
,x = embedding$V1
,y = embedding$V2
,color = embedding$Class
,type = "scattergl"
,mode = 'markers'
,marker = list(line = list(width = 2))
,colors = c("#FF0000FF", "#CCFF00FF")
,symbols = c("cross", "square", "triangle-down")
) %>% layout(xaxis = ax, yaxis = ax)
rainbow(5)
p
features <- train_data_model[, !names(stm_train_data_model) %in% c("y")]
tsne <- Rtsne(
as.matrix(features),
check_duplicates = FALSE,
perplexity = 30,
theta = 0.5,
dims = 2,
verbose = TRUE
)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(train_data_model$y)
ax <- list(title = ""
,zeroline = FALSE)
p <- plot_ly(
data = embedding
,x = embedding$V1
,y = embedding$V2
,color = embedding$Class
,type = "scattergl"
,mode = 'markers'
,marker = list(line = list(width = 2))
,colors = c("#FF0000FF", "#CCFF00FF")
,symbols = c("cross", "square", "triangle-down")
) %>% layout(xaxis = ax, yaxis = ax)
p
features <- train_data_model[, !names(stm_train_data_model) %in% c("y")]
features <- stm_train_data_model[, !names(stm_train_data_model) %in% c("y")]
tsne <- Rtsne(
as.matrix(features),
check_duplicates = FALSE,
perplexity = 30,
theta = 0.5,
dims = 2,
verbose = TRUE
)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(train_data_model$y)
ax <- list(title = ""
,zeroline = FALSE)
p <- plot_ly(
data = embedding
,x = embedding$V1
,y = embedding$V2
,color = embedding$Class
,type = "scattergl"
,mode = 'markers'
,marker = list(line = list(width = 2))
,colors = c("#FF0000FF", "#CCFF00FF")
,symbols = c("cross", "square", "triangle-down")
) %>% layout(xaxis = ax, yaxis = ax)
rainbow(5)
p
mmetric(KSVM_test2pred,test2_data_model[,1],c("ACC","TPR","PRECISION","F1"))
library(SnowballC)
library(textreadr)
library(wordcloud)
library(rpart)
library(caret)
library(tm)
library(MASS)
library(RWeka)
library(rminer)
library(kernlab)
library(SnowballC)
library(textreadr)
library(wordcloud)
library(rpart)
library(caret)
library(tm)
library(MASS)
library(RWeka)
library(rminer)
library(kernlab)
p
features <- stm_train_data_model[, !names(train_data_model) %in% c("y")]
tsne <- Rtsne(
as.matrix(features),
check_duplicates = FALSE,
perplexity = 30,
theta = 0.5,
dims = 2,
verbose = TRUE
)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(train_data_model$y)
ax <- list(title = ""
,zeroline = FALSE)
p <- plot_ly(
data = embedding
,x = embedding$V1
,y = embedding$V2
,color = embedding$Class
,type = "scattergl"
,mode = 'markers'
,marker = list(line = list(width = 2))
,colors = c("#FF0000FF", "#CCFF00FF")
,symbols = c( "square", "triangle-down")
) %>% layout(xaxis = ax, yaxis = ax)
p
-------------------------------------------------------------------------- train data model
train_matrix <- as.matrix(train_dtm_srt)
train_data_model <- data.frame(y=train_dataset$lable , x = train_matrix)
### summrize
str(train_data_model)
prop.table(table(train_data_model$y))
nrow(train_data_model)
summary(train_data_model)
features <- stm_train_data_model[, !names(train_data_model) %in% c("y")]
tsne <- Rtsne(
as.matrix(features),
check_duplicates = FALSE,
perplexity = 30,
theta = 0.5,
dims = 2,
verbose = TRUE
)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(train_data_model$y)
ax <- list(title = ""
,zeroline = FALSE)
p <- plot_ly(
data = embedding
,x = embedding$V1
,y = embedding$V2
,color = embedding$Class
,type = "scattergl"
,mode = 'markers'
,marker = list(line = list(width = 2))
,colors = c("#FF0000FF", "#CCFF00FF")
,symbols = c( "square", "triangle-down")
) %>% layout(xaxis = ax, yaxis = ax)
p
#-----------------------------
library('Rtsne')
library('ggplot2')
library('plotly')
library('tsne')
features <- stm_train_data_model[, !names(train_data_model) %in% c("y")]
tsne <- Rtsne(
as.matrix(features),
check_duplicates = FALSE,
perplexity = 30,
theta = 0.5,
dims = 2,
verbose = TRUE
)
embedding <- as.data.frame(tsne$Y)
embedding$Class <- as.factor(train_data_model$y)
ax <- list(title = ""
,zeroline = FALSE)
p <- plot_ly(
data = embedding
,x = embedding$V1
,y = embedding$V2
,color = embedding$Class
,type = "scattergl"
,mode = 'markers'
,marker = list(line = list(width = 2))
,colors = c("#FF0000FF", "#CCFF00FF")
,symbols = c( "square", "triangle-down")
) %>% layout(xaxis = ax, yaxis = ax)
p
View(embedding)
View(embedding)
